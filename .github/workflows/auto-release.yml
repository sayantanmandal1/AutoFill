name: Automatic Release

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  check-for-release:
    name: Check if Release is Needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.check.outputs.new_version }}
      release_type: ${{ steps.check.outputs.release_type }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for version calculation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check for version bump needed
        id: check
        run: |
          echo "🔍 Analyzing commits to determine if release is needed..."
          
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          # Get commits since last tag
          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --oneline --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"%s")
          fi
          
          echo "Commits since last tag:"
          echo "$COMMITS"
          
          # Check if there are any commits
          if [ -z "$COMMITS" ]; then
            echo "No new commits since last release"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Determine version bump type based on conventional commits
          MAJOR_BUMP=false
          MINOR_BUMP=false
          PATCH_BUMP=false
          
          while IFS= read -r commit; do
            echo "Analyzing commit: $commit"
            
            # Check for breaking changes (major bump)
            if echo "$commit" | grep -qE "(BREAKING CHANGE|!:)"; then
              MAJOR_BUMP=true
              echo "  -> Major bump (breaking change)"
            # Check for features (minor bump)
            elif echo "$commit" | grep -qE "^feat(\(.+\))?:"; then
              MINOR_BUMP=true
              echo "  -> Minor bump (new feature)"
            # Check for fixes, docs, style, refactor, test, chore (patch bump)
            elif echo "$commit" | grep -qE "^(fix|docs|style|refactor|test|chore)(\(.+\))?:"; then
              PATCH_BUMP=true
              echo "  -> Patch bump (fix/improvement)"
            else
              # Any other commit gets patch bump
              PATCH_BUMP=true
              echo "  -> Patch bump (other changes)"
            fi
          done <<< "$COMMITS"
          
          # Determine release type (highest priority wins)
          if [ "$MAJOR_BUMP" = true ]; then
            RELEASE_TYPE="major"
          elif [ "$MINOR_BUMP" = true ]; then
            RELEASE_TYPE="minor"
          elif [ "$PATCH_BUMP" = true ]; then
            RELEASE_TYPE="patch"
          else
            echo "No releasable changes found"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Calculate new version
          CURRENT_VERSION=$(echo $LAST_TAG | sed 's/^v//')
          if [ "$CURRENT_VERSION" = "0.0.0" ]; then
            CURRENT_VERSION="0.0.0"
          fi
          
          # Use node to calculate new version
          NEW_VERSION=$(node -e "
            const semver = require('semver');
            const current = '$CURRENT_VERSION';
            const type = '$RELEASE_TYPE';
            console.log(semver.inc(current, type) || '1.0.0');
          " 2>/dev/null || echo "1.0.0")
          
          echo "Release type: $RELEASE_TYPE"
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

  create-release:
    name: Create Automatic Release
    runs-on: ubuntu-latest
    needs: check-for-release
    if: needs.check-for-release.outputs.should_release == 'true'
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version in files
        run: |
          NEW_VERSION="${{ needs.check-for-release.outputs.new_version }}"
          echo "📝 Updating version to $NEW_VERSION in all files..."
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Update manifest.json
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$NEW_VERSION';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2));
          "
          
          echo "✅ Version updated to $NEW_VERSION"

      - name: Run tests
        run: |
          echo "🧪 Running tests before release..."
          npm test || echo "Some tests failed - continuing with warnings"

      - name: Run security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level=moderate || echo "Security audit completed with warnings"

      - name: Build extension
        run: |
          echo "🔨 Building extension..."
          node scripts/build-extension.js

      - name: Generate changelog
        run: |
          NEW_VERSION="${{ needs.check-for-release.outputs.new_version }}"
          echo "📝 Generating changelog for version $NEW_VERSION..."
          
          # Get previous tag for changelog generation
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Previous tag: $PREVIOUS_TAG"
          
          # Generate automated changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            node scripts/changelog-generator.js generate --version=$NEW_VERSION --from=$PREVIOUS_TAG || echo "Changelog generation completed with warnings"
          else
            node scripts/changelog-generator.js generate --version=$NEW_VERSION || echo "Changelog generation completed with warnings"
          fi

      - name: Create production build
        run: |
          NEW_VERSION="${{ needs.check-for-release.outputs.new_version }}"
          echo "🏗️ Creating production build..."
          
          # Create production build directory
          mkdir -p production-build

          # Copy extension files
          cp manifest.json production-build/
          cp popup.html production-build/
          cp popup.js production-build/
          cp content.js production-build/
          cp background.js production-build/
          cp storage.js production-build/
          cp style.css production-build/

          # Copy icons if they exist
          if [ -d "icons" ]; then
            cp -r icons production-build/
          fi

          # Create final extension package
          cd production-build
          zip -r ../job-application-autofill-v$NEW_VERSION.zip .
          cd ..
          
          echo "✅ Extension package created: job-application-autofill-v$NEW_VERSION.zip"

      - name: Commit version changes
        run: |
          NEW_VERSION="${{ needs.check-for-release.outputs.new_version }}"
          RELEASE_TYPE="${{ needs.check-for-release.outputs.release_type }}"
          
          git add package.json manifest.json CHANGELOG.md
          git commit -m "chore: release v$NEW_VERSION

          - Automatic $RELEASE_TYPE version bump
          - Updated package.json and manifest.json
          - Generated changelog
          
          [skip ci]" || echo "No changes to commit"

      - name: Create Git tag
        run: |
          NEW_VERSION="${{ needs.check-for-release.outputs.new_version }}"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION

          Automatic release based on conventional commits.
          Release type: ${{ needs.check-for-release.outputs.release_type }}"

      - name: Push changes and tags
        run: |
          git push origin master
          git push origin --tags

      - name: Generate release notes
        id: release_notes
        run: |
          NEW_VERSION="${{ needs.check-for-release.outputs.new_version }}"
          RELEASE_TYPE="${{ needs.check-for-release.outputs.release_type }}"
          
          # Get commits since last tag for release notes
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s")
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s")
          fi
          
          # Generate release notes
          cat > release-notes.md << EOF
          ## 🚀 Release v$NEW_VERSION

          **Release Type:** $RELEASE_TYPE version bump

          ### What's New
          $COMMITS

          ### Installation
          1. Download the extension zip file below
          2. Extract the zip file  
          3. Open Chrome and go to chrome://extensions/
          4. Enable "Developer mode"
          5. Click "Load unpacked" and select the extracted folder

          ### Automatic Release
          This release was created automatically based on conventional commit messages:
          - \`feat:\` commits trigger minor version bumps
          - \`fix:\` commits trigger patch version bumps  
          - \`BREAKING CHANGE\` or \`!:\` commits trigger major version bumps

          ### Changes
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-for-release.outputs.new_version }}
          name: Release v${{ needs.check-for-release.outputs.new_version }}
          body_path: release-notes.md
          files: |
            job-application-autofill-v${{ needs.check-for-release.outputs.new_version }}.zip
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-v${{ needs.check-for-release.outputs.new_version }}
          path: |
            job-application-autofill-v${{ needs.check-for-release.outputs.new_version }}.zip
            release-notes.md
            production-build/
          retention-days: 90

      - name: Release summary
        run: |
          NEW_VERSION="${{ needs.check-for-release.outputs.new_version }}"
          RELEASE_TYPE="${{ needs.check-for-release.outputs.release_type }}"
          echo "🎉 Automatic release v$NEW_VERSION created successfully!"
          echo ""
          echo "📦 Extension package: job-application-autofill-v$NEW_VERSION.zip"
          echo "🏷️ Git tag: v$NEW_VERSION"
          echo "📈 Release type: $RELEASE_TYPE"
          echo "📋 Release notes: Generated from conventional commits"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v$NEW_VERSION"
          echo ""
          echo "✅ Users can now download and install the extension manually"