name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint || echo "Linting not configured"
      
    - name: Run unit tests
      run: npm test
      
    - name: Run browser compatibility tests
      run: npm run test:cross-browser
      
    - name: Generate test coverage
      run: npm run test:coverage || npm test
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: |
        # Create build directory
        mkdir -p build
        
        # Copy extension files
        cp manifest.json build/
        cp popup.html build/
        cp popup.js build/
        cp content.js build/
        cp background.js build/
        cp storage.js build/
        cp style.css build/
        
        # Copy icons if they exist
        if [ -d "icons" ]; then
          cp -r icons build/
        fi
        
        # Create extension package
        cd build
        zip -r ../extension-${{ github.sha }}.zip .
        cd ..
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: extension-build-${{ github.sha }}
        path: |
          build/
          extension-${{ github.sha }}.zip
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency vulnerability scan
      run: |
        npx audit-ci --moderate || echo "Security scan completed with warnings"

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate API documentation
      run: |
        # Create docs build directory
        mkdir -p docs-build
        
        # Copy existing documentation
        cp -r docs/* docs-build/ 2>/dev/null || echo "No docs directory found"
        cp README.md docs-build/
        cp CHANGELOG.md docs-build/ 2>/dev/null || echo "No changelog found"
        cp CONTRIBUTING.md docs-build/ 2>/dev/null || echo "No contributing guide found"
        
        # Generate API docs (will be implemented in next task)
        node scripts/generate-api-docs.js || echo "API doc generation not yet implemented"
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs-build
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  release:
    name: Release to Chrome Web Store
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: extension-build-${{ github.sha }}
        
    - name: Update version numbers
      run: |
        # Extract version from release tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Release version: $VERSION"
        
        # Update manifest.json version
        node -e "
          const fs = require('fs');
          const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
          manifest.version = '$VERSION';
          fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2));
          console.log('Updated manifest.json version to $VERSION');
        "
        
        # Update package.json version if it exists
        if [ -f "package.json" ]; then
          npm version $VERSION --no-git-tag-version
          echo "Updated package.json version to $VERSION"
        fi
        
    - name: Create production build
      run: |
        # Create production build directory
        mkdir -p production-build
        
        # Copy updated files
        cp manifest.json production-build/
        cp popup.html production-build/
        cp popup.js production-build/
        cp content.js production-build/
        cp background.js production-build/
        cp storage.js production-build/
        cp style.css production-build/
        
        # Copy icons if they exist
        if [ -d "icons" ]; then
          cp -r icons production-build/
        fi
        
        # Create final extension package
        cd production-build
        zip -r ../extension-production-v${GITHUB_REF#refs/tags/v}.zip .
        cd ..
        
    - name: Upload to Chrome Web Store
      env:
        CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
        CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
        CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
        CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
      run: |
        # Install Chrome Web Store upload dependencies
        npm install googleapis chrome-webstore-upload
        
        # Run Chrome Web Store upload script
        node scripts/chrome-store-upload.js
        
        echo "‚úÖ Chrome Web Store upload completed"
        
    - name: Create GitHub Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          extension-production-v*.zip
        body: |
          ## üöÄ Release Notes
          
          This release includes:
          - Automated build and testing
          - Security vulnerability scanning
          - Production-ready extension package
          
          ### Installation
          1. Download the extension zip file
          2. Extract and load in Chrome developer mode
          3. Or wait for Chrome Web Store auto-update
          
          ### Changes
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: false

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, security-scan, deploy-docs]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "‚úÖ CI/CD Pipeline completed successfully!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Security: ${{ needs.security-scan.result }}"
        echo "- Docs: ${{ needs.deploy-docs.result }}"
        
    - name: Notify Failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "‚ùå CI/CD Pipeline failed!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Security: ${{ needs.security-scan.result }}"
        echo "- Docs: ${{ needs.deploy-docs.result }}"
        exit 1