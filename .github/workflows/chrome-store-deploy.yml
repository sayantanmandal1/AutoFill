name: Chrome Web Store Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.2.3)'
        required: true
        type: string
      skip_publish:
        description: 'Skip publishing (upload only)'
        required: false
        type: boolean
        default: false
      publish_target:
        description: 'Publish target'
        required: false
        type: choice
        options:
          - default
          - trustedTesters
        default: default

jobs:
  deploy:
    name: Deploy to Chrome Web Store
    runs-on: ubuntu-latest
    
    environment:
      name: chrome-web-store
      url: https://chrome.google.com/webstore/detail/${{ secrets.CHROME_EXTENSION_ID }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Using release version: $VERSION"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "Using manual version: $VERSION"
        else
          VERSION=$(node -p "require('./package.json').version")
          echo "Using package.json version: $VERSION"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Validate version format
      run: |
        if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "❌ Invalid version format: $VERSION"
          echo "Version must be in semantic version format (e.g., 1.2.3)"
          exit 1
        fi
        echo "✅ Version format valid: $VERSION"
        
    - name: Update version in files
      run: |
        echo "📝 Updating version to $VERSION in all files..."
        node scripts/version-manager.js update $VERSION
        
    - name: Run tests
      run: |
        echo "🧪 Running tests before deployment..."
        npm test
        
    - name: Run security audit
      run: |
        echo "🔒 Running security audit..."
        npm audit --audit-level=moderate || echo "Security audit completed with warnings"
        
    - name: Build extension
      run: |
        echo "🔨 Building extension..."
        node scripts/build-extension.js
        
    - name: Validate extension package
      run: |
        echo "🔍 Validating extension package..."
        
        # Check if package exists
        PACKAGE_PATH="dist/job-application-autofill-v$VERSION.zip"
        if [ ! -f "$PACKAGE_PATH" ]; then
          echo "❌ Extension package not found: $PACKAGE_PATH"
          exit 1
        fi
        
        # Check package size (should be reasonable for Chrome Web Store)
        PACKAGE_SIZE=$(stat -f%z "$PACKAGE_PATH" 2>/dev/null || stat -c%s "$PACKAGE_PATH")
        PACKAGE_SIZE_MB=$((PACKAGE_SIZE / 1024 / 1024))
        
        echo "📦 Package size: ${PACKAGE_SIZE_MB}MB"
        
        if [ $PACKAGE_SIZE_MB -gt 50 ]; then
          echo "⚠️ Warning: Package size is large (${PACKAGE_SIZE_MB}MB)"
        fi
        
        # Validate zip contents
        echo "📋 Package contents:"
        unzip -l "$PACKAGE_PATH"
        
        echo "✅ Extension package validated"
        
    - name: Deploy to Chrome Web Store
      id: deploy
      env:
        CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
        CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
        CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
        CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        SKIP_PUBLISH: ${{ github.event.inputs.skip_publish || 'false' }}
        PUBLISH_TARGET: ${{ github.event.inputs.publish_target || 'default' }}
      run: |
        echo "🚀 Deploying to Chrome Web Store..."
        echo "   Extension ID: $CHROME_EXTENSION_ID"
        echo "   Version: $VERSION"
        echo "   Skip Publish: $SKIP_PUBLISH"
        echo "   Publish Target: $PUBLISH_TARGET"
        
        # Run deployment script
        node scripts/chrome-store-upload.js
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: chrome-store-deployment-${{ steps.version.outputs.version }}
        path: |
          dist/
          deployment-summary.json
        retention-days: 30
        
    - name: Create deployment summary
      if: always()
      run: |
        echo "📊 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "===================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "**Extension ID:** $CHROME_EXTENSION_ID" >> $GITHUB_STEP_SUMMARY
        echo "**Build Number:** $GITHUB_RUN_NUMBER" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${GITHUB_SHA:0:8}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "dist/deployment-summary.json" ]; then
          echo "**Deployment Status:**" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat dist/deployment-summary.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'release' && github.event.release.target_commitish != 'main'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.version.outputs.version }}';
          const extensionId = '${{ secrets.CHROME_EXTENSION_ID }}';
          
          const comment = `
          ## 🚀 Chrome Web Store Deployment
          
          **Version ${version}** has been deployed to the Chrome Web Store!
          
          - **Extension ID:** ${extensionId}
          - **Build:** #${{ github.run_number }}
          - **Commit:** ${context.sha.substring(0, 8)}
          
          ### What's Next?
          - Extension will be available to users within 1-2 hours
          - Users with auto-update enabled will receive the update automatically
          - Manual installation: [Chrome Web Store](https://chrome.google.com/webstore/detail/${extensionId})
          
          ### Rollback
          If issues are detected, you can rollback by:
          1. Going to the Chrome Web Store Developer Dashboard
          2. Selecting a previous version to publish
          3. Or creating a hotfix release
          `;
          
          // Find related PR if this is a release
          const prs = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'closed',
            sort: 'updated',
            direction: 'desc'
          });
          
          const relatedPR = prs.data.find(pr => 
            pr.merge_commit_sha === context.sha ||
            pr.head.sha === context.sha
          );
          
          if (relatedPR) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: relatedPR.number,
              body: comment
            });
          }
          
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const issue = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Chrome Web Store Deployment Failed - v${{ steps.version.outputs.version }}`,
            body: `
            ## Deployment Failure Report
            
            **Version:** ${{ steps.version.outputs.version }}
            **Build:** #${{ github.run_number }}
            **Commit:** ${context.sha.substring(0, 8)}
            **Workflow:** [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            ### Failure Details
            The Chrome Web Store deployment failed during the automated release process.
            
            ### Next Steps
            1. Check the workflow logs for detailed error information
            2. Verify Chrome Web Store API credentials are valid
            3. Ensure the extension package meets Chrome Web Store requirements
            4. Consider manual deployment if automated deployment continues to fail
            
            ### Manual Deployment
            If needed, you can deploy manually:
            1. Download the build artifacts from this workflow
            2. Go to [Chrome Web Store Developer Dashboard](https://chrome.google.com/webstore/devconsole)
            3. Upload the extension package manually
            
            ---
            *This issue was automatically created by the deployment workflow.*
            `,
            labels: ['bug', 'deployment', 'chrome-web-store']
          };
          
          await github.rest.issues.create(issue);

  notify-success:
    name: Notify Successful Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: Send success notification
      run: |
        echo "🎉 Chrome Web Store deployment completed successfully!"
        echo "Version ${{ needs.deploy.outputs.version }} is now available to users."
        
        # Add any additional notification logic here
        # (Slack, Discord, email, etc.)

  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'release'
    needs: deploy
    
    steps:
    - name: Create rollback instructions
      run: |
        echo "🚨 Deployment failed - Rollback instructions:"
        echo "1. Go to Chrome Web Store Developer Dashboard"
        echo "2. Select the previous working version"
        echo "3. Publish the previous version"
        echo "4. Monitor for user reports"
        echo ""
        echo "Extension ID: ${{ secrets.CHROME_EXTENSION_ID }}"
        echo "Failed Version: ${{ needs.deploy.outputs.version }}"