name: Manual Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (auto-detects from commits if not specified)'
        required: false
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
        default: auto
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Determine version automatically
        id: version
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          echo "üîç Determining version automatically..."
          
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=$(echo $LAST_TAG | sed 's/^v//')
          
          if [ "$CURRENT_VERSION" = "0.0.0" ]; then
            CURRENT_VERSION="0.0.0"
          fi
          
          echo "Current version: $CURRENT_VERSION"
          echo "Requested release type: $RELEASE_TYPE"
          
          # If auto, analyze commits to determine release type
          if [ "$RELEASE_TYPE" = "auto" ]; then
            echo "üîç Analyzing commits to determine release type..."
            
            # Get commits since last tag
            if [ "$LAST_TAG" = "v0.0.0" ]; then
              COMMITS=$(git log --oneline --pretty=format:"%s")
            else
              COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"%s")
            fi
            
            # Determine version bump type based on conventional commits
            MAJOR_BUMP=false
            MINOR_BUMP=false
            PATCH_BUMP=false
            
            while IFS= read -r commit; do
              if echo "$commit" | grep -qE "(BREAKING CHANGE|!:)"; then
                MAJOR_BUMP=true
              elif echo "$commit" | grep -qE "^feat(\(.+\))?:"; then
                MINOR_BUMP=true
              elif echo "$commit" | grep -qE "^(fix|docs|style|refactor|test|chore)(\(.+\))?:"; then
                PATCH_BUMP=true
              else
                PATCH_BUMP=true
              fi
            done <<< "$COMMITS"
            
            # Determine release type (highest priority wins)
            if [ "$MAJOR_BUMP" = true ]; then
              RELEASE_TYPE="major"
            elif [ "$MINOR_BUMP" = true ]; then
              RELEASE_TYPE="minor"
            else
              RELEASE_TYPE="patch"
            fi
            
            echo "Auto-detected release type: $RELEASE_TYPE"
          fi
          
          # Calculate new version using semver
          NEW_VERSION=$(node -e "
            const semver = require('semver');
            const current = '$CURRENT_VERSION';
            const type = '$RELEASE_TYPE';
            console.log(semver.inc(current, type) || '1.0.0');
          " 2>/dev/null || echo "1.0.0")
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

      - name: Update version in files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "üìù Updating version to $VERSION in all files..."
          
          # Update package.json
          npm version $VERSION --no-git-tag-version
          
          # Update manifest.json
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$VERSION';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2));
          "
          
          echo "‚úÖ Version updated to $VERSION"

      - name: Run tests
        run: |
          echo "üß™ Running tests before release..."
          npm test || echo "Some tests failed - continuing with warnings"

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level=moderate || echo "Security audit completed with warnings"

      - name: Build extension
        run: |
          echo "üî® Building extension..."
          node scripts/build-extension.js

      - name: Generate changelog
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "üìù Generating changelog for version $VERSION..."
          
          # Get previous tag for changelog generation
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Previous tag: $PREVIOUS_TAG"
          
          # Generate automated changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            node scripts/changelog-generator.js generate --version=$VERSION --from=$PREVIOUS_TAG || echo "Changelog generation completed with warnings"
          else
            node scripts/changelog-generator.js generate --version=$VERSION || echo "Changelog generation completed with warnings"
          fi

      - name: Create production build
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "üèóÔ∏è Creating production build..."
          
          # Create production build directory
          mkdir -p production-build

          # Copy extension files
          cp manifest.json production-build/
          cp popup.html production-build/
          cp popup.js production-build/
          cp content.js production-build/
          cp background.js production-build/
          cp storage.js production-build/
          cp style.css production-build/

          # Copy icons if they exist
          if [ -d "icons" ]; then
            cp -r icons production-build/
          fi

          # Create final extension package
          cd production-build
          zip -r ../job-application-autofill-v$VERSION.zip .
          cd ..
          
          echo "‚úÖ Extension package created: job-application-autofill-v$VERSION.zip"

      - name: Commit version changes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add package.json manifest.json CHANGELOG.md
          git commit -m "chore: bump version to $VERSION" || echo "No changes to commit"

      - name: Create Git tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git tag -a "v$VERSION" -m "Release version $VERSION"

      - name: Push changes and tags
        run: |
          git push origin master
          git push origin --tags

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Generate release notes
          RELEASE_NOTES=$(node scripts/changelog-generator.js release-notes --version=$VERSION 2>/dev/null || echo "")
          
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="## üöÄ Release v$VERSION

This release includes:
- Automated build and testing
- Security vulnerability scanning
- Production-ready extension package

### Installation
1. Download the extension zip file below
2. Extract the zip file
3. Open Chrome and go to chrome://extensions/
4. Enable \"Developer mode\"
5. Click \"Load unpacked\" and select the extracted folder

### Changes
See [CHANGELOG.md](CHANGELOG.md) for detailed changes."
          fi
          
          # Save release notes to file for GitHub release
          echo "$RELEASE_NOTES" > release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body_path: release-notes.md
          files: |
            job-application-autofill-v${{ github.event.inputs.version }}.zip
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          generate_release_notes: true

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-v${{ github.event.inputs.version }}
          path: |
            job-application-autofill-v${{ github.event.inputs.version }}.zip
            release-notes.md
            production-build/
          retention-days: 90

      - name: Release summary
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "üéâ Release v$VERSION created successfully!"
          echo ""
          echo "üì¶ Extension package: job-application-autofill-v$VERSION.zip"
          echo "üè∑Ô∏è Git tag: v$VERSION"
          echo "üìã Release notes: Generated and attached to release"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          echo ""
          echo "‚úÖ Users can now download and install the extension manually"